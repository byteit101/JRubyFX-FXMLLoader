# * Copyright (c) 2013 Patrick Plenefisch
# * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
# *
# * This code is free software; you can redistribute it and/or modify it
# * under the terms of the GNU General Public License version 2 only, as
# * published by the Free Software Foundation.  Oracle designates this
# * particular file as subject to the "Classpath" exception as provided
# * by Oracle in the LICENSE file that accompanied this code.
# *
# * This code is distributed in the hope that it will be useful, but WITHOUT
# * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# * version 2 for more details (a copy is included in the LICENSE file that
# * accompanied this code).
# *
# * You should have received a copy of the GNU General Public License version
# * 2 along with this work; if not, write to the Free Software Foundation,
# * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
# *

require 'digest/sha1'
require 'fileutils'

def javafx
  Java::javafx
end

Infinity = 1.0/0.0

class FxmlJitInfo
  include JRubyFX
  def self.hash(file)
    Digest::SHA1.hexdigest(File.read file)
  end
  def self.load_aot(file, cache, validate = true)
    if validate
      hash = hash(file)
      f_hash = File.open(cache, "r", &:readline).strip
      return false if "# #{hash} encoding: utf-8" != f_hash
    end
    hash = Digest::SHA1.hexdigest(File.basename file)
    require cache
    JRubyFX::GeneratedAssets.const_get("AOT#{hash}").new rescue nil
  end
  # TODO: store jit settings in here instead of $RB_* variables
  attr_accessor :file_name, :raw_code, :jit_settings
  def initialize(file_name, jit_settings=1, outfile=nil, cache_dir=nil,validate = true, opts = nil)
    @file_name = file_name
    @no_write = (opts && opts[:no_write]) || false
    if @file_name.start_with? "file:"
      @file_name = @file_name.gsub(/^file\:/, '')
    elsif @file_name.start_with? "jar:"
      @no_write = true
    elsif @file_name.start_with? "compoundjar:"
      @no_write = true
    end
    @jit_settings = jit_settings
    @run_count = 0
    @opts = opts
    @outfile = if @outfile
      outfile
    else
      cache_dir = cache_dir || File.join(File.dirname(@file_name), ".jrubyfx_cache")
      FileUtils.mkpath(cache_dir) unless File.directory?(cache_dir) or @no_write
      @f_hash = Digest::SHA1.hexdigest(File.basename @file_name)
      File.join(cache_dir, "#{@f_hash}.rb")
    end
    if File.exist?(@outfile) && !(opts && opts[:force])
      @compiled = self.class.load_aot(@file_name, @outfile, validate)
      if @compiled
        dputs "got #{file_name} from cache"
      end
    end
  end
  def hash
    FxmlJitInfo.hash(@file_name)
  end
  def should_jit?
    return false if @jit_settings == :no_jit || compiled?
    return true if (@run_count += 1) >= @jit_settings
  end
  def compiled?
    !!@compiled
  end
  def decompile
    @compiled = nil
  end
  def __build_via_jit(__local_fxml_controller, __local_namespace, __local_jruby_ext)
    @compiled.__build_via_jit(__local_fxml_controller, __local_namespace, __local_jruby_ext)
  end
  def compile(code=@raw_code)
    @raw_code = code
    # TODO: begin rescue end
    full_code =  <<METHOD_DEF
    def __build_via_jit(__local_fxml_controller, __local_namespace, __local_jruby_ext)
      __local_fx_id_setter = lambda do |name, __i|
        __local_namespace[name] = __i
        __local_fxml_controller.instance_variable_set(("@\#{name}").to_sym, __i)
      end
#{code}
    end
METHOD_DEF
    ;#)
    unless @no_write
      begin
        jit_aot_cache(full_code)
      rescue
        p $!
        jit_no_cache(full_code)
      end
    else
      jit_no_cache(full_code)
    end
    if @opts && @opts[:compiled_hook]
      @opts[:compiled_hook].call(@outfile)
    end

  end

  def jit_no_cache(full_code)
    dputs "JIT only, no aot for #{@file_name}"
    self.instance_eval full_code
    @compiled = true
  end

  def jit_aot_cache(full_code)
    File.open(@outfile, "w") do |f|
      hash = hash()
      f << <<AOT
# #{hash} encoding: utf-8
# @@ 1

########################### DO NOT MODIFY THIS FILE ###########################
#       This file was automatically generated by JRubyFX-fxmlloader on        #
# #{Time.now} for #{@file_name}
########################### DO NOT MODIFY THIS FILE ###########################

module JRubyFX
  module GeneratedAssets
    class AOT#{@f_hash}
      include JRubyFX
      #{full_code}
      def hash
        #{hash.inspect}
      end
      def compiled?
        true
      end
    end
  end
end
AOT
    end
    puts "saved #{@outfile} to cache"
    require @outfile
    @compiled = JRubyFX::GeneratedAssets.const_get("AOT#{@f_hash}").new rescue nil
  end
end
